'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Image from 'next/image'
import { Star, Heart, Minus, Plus, ShoppingBasket } from 'lucide-react'
import { Button } from "../../components/ui/Button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../components/ui/Tabs"
import { FilterSidebar } from "../../components/FilterSidebar"

interface Product {
  id: number
  name: string
  price: number
  image: string
  category: string
  rating: number
  description: string
  productCategory: string
}

// Mock product data for all categories
const allProducts: Product[] = [
  // Fresh Food
  { id: 1, name: "Organic Bananas", price: 2.99, image: "/placeholder.svg", category: "Fruits", rating: 4.5, description: "Fresh, organic bananas sourced from local farmers.", productCategory: "fresh-food" },
  { id: 2, name: "Fresh Tomatoes", price: 1.99, image: "/placeholder.svg", category: "Vegetables", rating: 4.2, description: "Juicy, ripe tomatoes perfect for salads.", productCategory: "fresh-food" },
  { id: 3, name: "Whole Chicken", price: 8.99, image: "/placeholder.svg", category: "Meat", rating: 4.0, description: "Farm-raised, antibiotic-free whole chicken.", productCategory: "fresh-food" },
  { id: 4, name: "Atlantic Salmon", price: 12.99, image: "/placeholder.svg", category: "Seafood", rating: 4.7, description: "Wild-caught Atlantic salmon, rich in omega-3.", productCategory: "fresh-food" },
  { id: 5, name: "Organic Spinach", price: 3.99, image: "/placeholder.svg", category: "Vegetables", rating: 4.3, description: "Fresh, organic spinach leaves.", productCategory: "fresh-food" },
  { id: 6, name: "Red Apples", price: 4.99, image: "/placeholder.svg", category: "Fruits", rating: 4.4, description: "Crisp and sweet red apples.", productCategory: "fresh-food" },
  { id: 7, name: "Ground Beef", price: 7.99, image: "/placeholder.svg", category: "Meat", rating: 4.1, description: "Lean ground beef from grass-fed cattle.", productCategory: "fresh-food" },
  { id: 8, name: "Fresh Tilapia", price: 9.99, image: "/placeholder.svg", category: "Seafood", rating: 4.2, description: "Fresh tilapia fillets.", productCategory: "fresh-food" },

  // Dry Food
  { id: 9, name: "Brown Rice", price: 4.99, image: "/placeholder.svg", category: "Grains", rating: 4.3, description: "Wholesome brown rice, rich in fiber.", productCategory: "dry-food" },
  { id: 10, name: "Whole Wheat Pasta", price: 3.49, image: "/placeholder.svg", category: "Pasta", rating: 4.1, description: "Nutritious whole wheat pasta.", productCategory: "dry-food" },
  { id: 11, name: "Oats", price: 2.99, image: "/placeholder.svg", category: "Cereal", rating: 4.4, description: "Hearty oats for a nutritious breakfast.", productCategory: "dry-food" },
  { id: 12, name: "Chickpeas", price: 1.99, image: "/placeholder.svg", category: "Legumes", rating: 4.2, description: "Protein-rich chickpeas for various dishes.", productCategory: "dry-food" },
  { id: 13, name: "Quinoa", price: 6.49, image: "/placeholder.svg", category: "Grains", rating: 4.6, description: "Superfood quinoa, packed with nutrients.", productCategory: "dry-food" },
  { id: 14, name: "Lentils", price: 2.49, image: "/placeholder.svg", category: "Legumes", rating: 4.3, description: "Versatile lentils for soups and salads.", productCategory: "dry-food" },
  { id: 15, name: "Granola", price: 5.99, image: "/placeholder.svg", category: "Cereal", rating: 4.5, description: "Crunchy granola with nuts and dried fruits.", productCategory: "dry-food" },
  { id: 16, name: "Couscous", price: 3.99, image: "/placeholder.svg", category: "Grains", rating: 4.2, description: "Light and fluffy couscous.", productCategory: "dry-food" },

  // Beverages
  { id: 17, name: "Orange Juice", price: 3.99, image: "/placeholder.svg", category: "Juices", rating: 4.2, description: "Freshly squeezed orange juice.", productCategory: "beverages" },
  { id: 18, name: "Green Tea", price: 2.49, image: "/placeholder.svg", category: "Tea", rating: 4.5, description: "Antioxidant-rich green tea.", productCategory: "beverages" },
  { id: 19, name: "Coca-Cola", price: 1.99, image: "/placeholder.svg", category: "Soda", rating: 4.0, description: "Classic Coca-Cola soft drink.", productCategory: "beverages" },
  { id: 20, name: "Coffee Beans", price: 12.99, image: "/placeholder.svg", category: "Coffee", rating: 4.8, description: "Premium roasted coffee beans.", productCategory: "beverages" },
  { id: 21, name: "Lemonade", price: 2.99, image: "/placeholder.svg", category: "Juices", rating: 4.1, description: "Refreshing homemade-style lemonade.", productCategory: "beverages" },
  { id: 22, name: "Mineral Water", price: 0.99, image: "/placeholder.svg", category: "Water", rating: 4.0, description: "Pure mineral water from natural springs.", productCategory: "beverages" },
  { id: 23, name: "Energy Drink", price: 2.99, image: "/placeholder.svg", category: "Energy", rating: 3.9, description: "Energizing drink for a quick boost.", productCategory: "beverages" },
  { id: 24, name: "Herbal Tea", price: 4.49, image: "/placeholder.svg", category: "Tea", rating: 4.3, description: "Soothing blend of herbal teas.", productCategory: "beverages" },

  // Hair Care
  { id: 25, name: "Shampoo", price: 6.99, image: "/placeholder.svg", category: "Cleansing", rating: 4.3, description: "Nourishing shampoo for all hair types.", productCategory: "hair-care" },
  { id: 26, name: "Conditioner", price: 7.49, image: "/placeholder.svg", category: "Conditioning", rating: 4.4, description: "Hydrating conditioner for smooth hair.", productCategory: "hair-care" },
  { id: 27, name: "Hair Oil", price: 5.99, image: "/placeholder.svg", category: "Treatment", rating: 4.6, description: "Nourishing hair oil for shine and health.", productCategory: "hair-care" },
  { id: 28, name: "Hair Spray", price: 4.99, image: "/placeholder.svg", category: "Styling", rating: 4.1, description: "Long-lasting hair spray for styling.", productCategory: "hair-care" },
  { id: 29, name: "Hair Gel", price: 3.99, image: "/placeholder.svg", category: "Styling", rating: 4.0, description: "Strong hold hair gel for various styles.", productCategory: "hair-care" },
  { id: 30, name: "Hair Mask", price: 8.99, image: "/placeholder.svg", category: "Treatment", rating: 4.7, description: "Deep conditioning hair mask for damaged hair.", productCategory: "hair-care" },
  { id: 31, name: "Leave-in Conditioner", price: 9.99, image: "/placeholder.svg", category: "Conditioning", rating: 4.5, description: "Lightweight leave-in conditioner for daily use.", productCategory: "hair-care" },
  { id: 32, name: "Heat Protectant", price: 12.99, image: "/placeholder.svg", category: "Treatment", rating: 4.8, description: "Protective spray for heat styling.", productCategory: "hair-care" },

  // Skin Care
  { id: 33, name: "Facial Cleanser", price: 6.99, image: "/placeholder.svg", category: "Cleansing", rating: 4.5, description: "Gentle facial cleanser for all skin types.", productCategory: "skin-care" },
  { id: 34, name: "Moisturizer", price: 8.99, image: "/placeholder.svg", category: "Hydration", rating: 4.7, description: "Hydrating moisturizer for soft skin.", productCategory: "skin-care" },
  { id: 35, name: "Sunscreen", price: 9.99, image: "/placeholder.svg", category: "Protection", rating: 4.8, description: "Broad-spectrum sunscreen for daily use.", productCategory: "skin-care" },
  { id: 36, name: "Face Mask", price: 5.99, image: "/placeholder.svg", category: "Treatment", rating: 4.4, description: "Rejuvenating face mask for glowing skin.", productCategory: "skin-care" },
  { id: 37, name: "Eye Cream", price: 11.99, image: "/placeholder.svg", category: "Treatment", rating: 4.6, description: "Nourishing eye cream for delicate eye area.", productCategory: "skin-care" },
  { id: 38, name: "Exfoliator", price: 7.99, image: "/placeholder.svg", category: "Cleansing", rating: 4.3, description: "Gentle exfoliating scrub for smooth skin.", productCategory: "skin-care" },
  { id: 39, name: "Toner", price: 6.49, image: "/placeholder.svg", category: "Hydration", rating: 4.2, description: "Balancing toner for refreshed skin.", productCategory: "skin-care" },
  { id: 40, name: "Serum", price: 15.99, image: "/placeholder.svg", category: "Treatment", rating: 4.9, description: "Concentrated serum for targeted skincare.", productCategory: "skin-care" },

  // Accessories
  { id: 41, name: "Sunglasses", price: 14.99, image: "/placeholder.svg", category: "Fashion", rating: 4.2, description: "Stylish sunglasses for UV protection.", productCategory: "accessories" },
  { id: 42, name: "Watch", price: 25.99, image: "/placeholder.svg", category: "Fashion", rating: 4.6, description: "Elegant watch for everyday wear.", productCategory: "accessories" },
  { id: 43, name: "Necklace", price: 9.99, image: "/placeholder.svg", category: "Jewelry", rating: 4.3, description: "Delicate necklace for a touch of elegance.", productCategory: "accessories" },
  { id: 44, name: "Bracelet", price: 5.49, image: "/placeholder.svg", category: "Jewelry", rating: 4.1, description: "Charming bracelet to complement any outfit.", productCategory: "accessories" },
  { id: 45, name: "Belt", price: 7.99, image: "/placeholder.svg", category: "Fashion", rating: 4.0, description: "Versatile belt for casual and formal wear.", productCategory: "accessories" },
  { id: 46, name: "Earrings", price: 3.99, image: "/placeholder.svg", category: "Jewelry", rating: 4.4, description: "Stylish earrings for everyday elegance.", productCategory: "accessories" },
  { id: 47, name: "Hat", price: 12.99, image: "/placeholder.svg", category: "Fashion", rating: 4.2, description: "Trendy hat for sun protection and style.", productCategory: "accessories" },
  { id: 48, name: "Wallet", price: 19.99, image: "/placeholder.svg", category: "Fashion", rating: 4.5, description: "Durable and stylish wallet for everyday use.", productCategory: "accessories" },
]

const categories = [
  { id: 1, name: 'Fresh Food', link: '/categories/fresh-food', slug: 'fresh-food' },
  { id: 2, name: 'Dry Food', link: '/categories/dry-food', slug: 'dry-food' },
  { id: 3, name: 'Beverages', link: '/categories/beverages', slug: 'beverages' },
  { id: 4, name: 'Hair Care', link: '/categories/hair-care', slug: 'hair-care' },
  { id: 5, name: 'Skin Care', link: '/categories/skin-care', slug: 'skin-care' },
  { id: 6, name: 'Accessories', link: '/categories/accessories', slug: 'accessories' },
]

// Mock function to fetch product data
const fetchProduct = (id: string, category: string): Promise<Product | null> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const product = allProducts.find(p => p.id.toString() === id && p.productCategory === category)
      resolve(product || null)
    }, 500) // Simulate network delay
  })
}

export default function ProductPage() {
  const { id } = useParams()
  const router = useRouter()
  const [product, setProduct] = useState<Product | null>(null)
  const [quantity, setQuantity] = useState(1)
  const [mainImage, setMainImage] = useState('')
  const [category, setCategory] = useState('')

  useEffect(() => {
    const loadProduct = async () => {
      const path = window.location.pathname
      const categoryFromPath = path.split('/')[2]
      setCategory(categoryFromPath)

      const productData = await fetchProduct(id as string, categoryFromPath)
      setProduct(productData)
      if (productData) {
        setMainImage(productData.image)
      }
    }
    loadProduct()
  }, [id])

  const handleQuantityChange = (change: number) => {
    setQuantity(Math.max(1, quantity + change))
  }

  const handleAddToCart = () => {
    if (product) {
      console.log(`Added ${quantity} ${product.name}(s) to cart`)
    }
  }

  const handleAddToWishlist = () => {
    if (product) {
      console.log(`Added ${product.name} to wishlist`)
    }
  }

  if (!product) {
    return (
      <div className="flex items-center justify-center w-[80%] h-screen mx-auto px-4 py-8">
        Loading...
      </div>
    )
  }

  // Generate related products
  const relatedProducts = allProducts
    .filter(p => p.category === product.category && p.id !== product.id && p.productCategory === category)
    .slice(0, 4)

  return (
    <div className="w-full bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 w-full sm:w-[95%] md:w-[90%] lg:w-[80%]">
        <div className="flex flex-col lg:flex-row gap-8">
          <div className="w-full lg:w-1/4 xl:w-1/5">
            <FilterSidebar
              categories={categories}
              productCategories={[]}
              onSearchChange={() => {}}
              onCategoryChange={() => {}}
              onPriceRangeChange={() => {}}
              maxPrice={0}
            />
          </div>

          <div className="w-full lg:w-3/4 xl:w-4/5">
            <div className="flex flex-col md:flex-row gap-8">
              {/* Product Images */}
              <div className="md:w-1/2">
                <Image
                  src={mainImage}
                  alt={product.name}
                  width={600}
                  height={600}
                  className="w-full h-auto rounded-lg mb-4"
                />
                <div className="grid grid-cols-5 gap-2">
                  {[product.image, ...Array(4)].map((img, index) => (
                    <Image
                      key={index}
                      src={img || '/placeholder.svg'}
                      alt={`${product.name} thumbnail ${index + 1}`}
                      width={100}
                      height={100}
                      className={`w-full h-auto rounded-md cursor-pointer ${
                        img === mainImage ? 'border-2 border-green-500' : ''
                      }`}
                      onClick={() => setMainImage(img || '/placeholder.svg')}
                    />
                  ))}
                </div>
              </div>

              {/* Product Details */}
              <div className="md:w-1/2">
                <h1 className="text-3xl font-bold mb-4">{product.name}</h1>
                <div className="flex items-center mb-4">
                  <div className="flex">
                    {[...Array(5)].map((_, i) => (
                      <Star
                        key={i}
                        className={`w-5 h-5 ${
                          i < Math.floor(product.rating)
                            ? 'text-yellow-400 fill-current'
                            : 'text-gray-300'
                        }`}
                      />
                    ))}
                  </div>
                  <span className="ml-2 text-gray-600">({product.rating})</span>
                </div>
                <p className="text-2xl font-bold mb-4">${product.price.toFixed(2)}</p>
                <div className="flex items-center mb-4">
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => handleQuantityChange(-1)}
                    disabled={quantity === 1}
                  >
                    <Minus className="h-4 w-4" />
                  </Button>
                  <span className="mx-4 text-xl">{quantity}</span>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => handleQuantityChange(1)}
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
                <div className="flex gap-4 mb-8">
                  <Button className="flex-1 bg-green-600 text-white" onClick={handleAddToCart}>
                    <ShoppingBasket className="mr-2 h-5 w-5" /> Add to Cart
                  </Button>
                  <Button variant="outline" className="flex-1" onClick={handleAddToWishlist}>
                    <Heart className="mr-2 h-5 w-5" /> Add to Wishlist
                  </Button>
                </div>
                <Tabs defaultValue="description">
                  <TabsList>
                    <TabsTrigger value="description">Description</TabsTrigger>
                    <TabsTrigger value="reviews">Reviews</TabsTrigger>
                  </TabsList>
                  <TabsContent value="description">
                    <p>{product.description}</p>
                  </TabsContent>
                  <TabsContent value="reviews">
                    <p>Customer reviews will be displayed here.</p>
                  </TabsContent>
                </Tabs>
              </div>
            </div>

            {/* Related Products */}
            <div className="mt-12">
              <h2 className="text-2xl font-bold mb-4">Related Products</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6">
                {relatedProducts.map((relatedProduct) => (
                  <div key={relatedProduct.id} className="bg-white rounded-lg shadow-md overflow-hidden">
                    <Image
                      src={relatedProduct.image}
                      alt={relatedProduct.name}
                      width={300}
                      height={200}
                      className="w-full h-48 object-cover"
                    />
                    <div className="p-4">
                      <h3 className="text-lg font-semibold mb-2">{relatedProduct.name}</h3>
                      <p className="text-xl font-bold">${relatedProduct.price.toFixed(2)}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}